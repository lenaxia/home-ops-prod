---
## @formatter:off
## values.yaml
##
## Repository: authelia https://charts.authelia.com
## Chart: authelia
##
## This values file is designed for full deployment, eventually for in production once the chart makes it to 1.0.0.
## It uses the following providers:
##   - authentication: LDAP
##   - storage: MySQL
##   - session: redis

image:
  registry: ghcr.io
  repository: authelia/authelia
  tag: ""
  pullPolicy: IfNotPresent

# nameOverride: authelia-deployment-name
# appNameOverride: authelia

annotations: {}
labels: {}

## Authelia Domain
## Should be the root domain you want to protect.
## For example if you have apps app1.example.com and app2.example.com it should be example.com
## This affects the ingress (partially sets the domain used) and configMap.
## Authelia must be served from the domain or a subdomain under it.
domain: thekao.cloud

service:
  annotations: {}
  labels: {}
  type: LoadBalancer
  port: 80

##
## Authelia Config Map Generator
##
configMap:
  enabled: true

  annotations: {}
  labels: {}

  key: configuration.yaml

  existingConfigMap: ""

  log:
    level: info
    format: text
    ## File path where the logs will be written. If not set logs are written to stdout.
    # file_path: /config/authelia.log
    file_path: /config/authelia.log

  ##
  ## Telemetry Configuration
  ##
  telemetry:
    metrics:
      enabled: false
      port: 9959

      serviceMonitor:
        enabled: false
        annotations: {}
        labels: {}

  default_redirection_url: https://authelia.thekao.cloud

  ## Options are totp, webauthn, mobile_push.
  default_2fa_method: ""

  theme: light

  ##
  ## TOTP Configuration
  ##
  totp:
    disable: false
    issuer: thekao.cloud
    algorithm: sha1
    digits: 6
    period: 30
    skew: 1

  ##
  ## WebAuthn Configuration
  ##
  webauthn:
    disable: false
    timeout: 60s
    display_name: TheKaoCloud
    ## Options are none, indirect, direct.
    attestation_conveyance_preference: indirect
    ## Options are required, preferred, discouraged.
    user_verification: preferred

  ##
  ## NTP Configuration
  ##
  ntp:
    address: "time.cloudflare.com:123"
    version: 4
    max_desync: 3s
    disable_startup_check: false
    disable_failure: false

  ##
  ## Duo Push API Configuration
  ##
  ## Parameters used to contact the Duo API. Those are generated when you protect an application of type
  ## "Partner Auth API" in the management panel.
  duo_api:
    enabled: true
    hostname: api-b68b8774.duosecurity.com
    integration_key: DI2IGENLJKFDHSKGWT1L
    enable_self_enrollment: false

  ##
  ## Authentication Backend Provider Configuration
  ##
  authentication_backend:
    password_reset:
      disable: false
      custom_url: ""

    refresh_interval: 5m

    ## LDAP backend configuration.
    ##
    ldap:
      enabled: true
      implementation: custom
      url: ldap://${RURI_ADDR}
      timeout: 5s
      start_tls: false

      tls:
        server_name: ""
        skip_verify: false
        minimum_version: TLS1.2

      base_dn: dc=kao,dc=family

      username_attribute: uid
      additional_users_dn: cn=users
      users_filter: (&({username_attribute}={input})(objectClass=inetOrgPerson))

      additional_groups_dn: cn=groups
      groups_filter: (&(member={dn})(objectclass=posixGroup))
      group_name_attribute: cn

      mail_attribute: mail

      display_name_attribute: displayname 

      permit_referrals: false

      ## Strongly discouraged. See https://www.authelia.com/configuration/first-factor/ldap/#permit_unauthenticated_bind.
      permit_unauthenticated_bind: false

      ## The username of the admin user.
      user: uid=autheliauser,cn=users,dc=kao,dc=family

  ##
  ## Password Policy Configuration.
  ##
  password_policy:
    standard:
      enabled: false
      min_length: 8
      max_length: 0
      require_uppercase: true
      require_lowercase: true
      require_number: true
      require_special: true

    ## zxcvbn is a well known and used password strength algorithm. It does not have tunable settings.
    zxcvbn:
      enabled: false
      min_score: 0

  ##
  ## Access Control Configuration
  ##
  ## Access control is a list of rules defining the authorizations applied for one resource to users or group of users.
  ##
  ## If 'access_control' is not defined, ACL rules are disabled and the 'bypass' rule is applied, i.e., access is allowed
  ## to anyone. Otherwise restrictions follow the rules defined.
  ##
  ## Note: One can use the wildcard * to match any subdomain.
  ## It must stand at the beginning of the pattern. (example: *.mydomain.com)
  ##
  ## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct.
  ##
  ## Definition: A 'rule' is an object with the following keys: 'domain', 'subject', 'policy' and 'resources'.
  ##
  ## - 'domain' defines which domain or set of domains the rule applies to.
  ##
  ## - 'subject' defines the subject to apply authorizations to. This parameter is optional and matching any user if not
  ##    provided. If provided, the parameter represents either a user or a group. It should be of the form
  ##    'user:<username>' or 'group:<groupname>'.
  ##
  ## - 'policy' is the policy to apply to resources. It must be either 'bypass', 'one_factor', 'two_factor' or 'deny'.
  ##
  ## - 'resources' is a list of regular expressions that matches a set of resources to apply the policy to. This parameter
  ##   is optional and matches any resource if not provided.
  ##
  ## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
  access_control:
    secret:
      enabled: false
      key: configuration.acl.yaml
      existingSecret: ""

    default_policy: two_factor

    networks:
    - name: private
      networks:
      - 10.0.0.0/8
      - 172.16.0.0/12
      - 192.168.0.0/16

    rules:
    - domain: authelia.mikegoes.online
      policy: bypass
    - domain:
        - "dsm.mikegoes.online"
      policy: two_factor
    - domain: "*.mikegoes.online"
      policy: bypass
      networks:
        - private
    - domain:
        - "*.mikegoes.online"
        - "mikegoes.online"
      policy: one_factor
    - domain:
        - "mikegoes.online"
        - "*.mikegoes.online"
      policy: two_factor
      subject:
        - "group:administrators"
    # rules:
    # - domain_regex: '^.*\.example.com$'
    #   policy: bypass
    # - domain: public.example.com
    #   policy: bypass
    # - domain: "*.example.com"
    #   policy: bypass
    #   methods:
    #   - OPTIONS
    # - domain: secure.example.com
    #   policy: one_factor
    #   networks:
    #   - private
    #   - vpn
    #   - 192.168.1.0/24
    #   - 10.0.0.1
    # - domain:
    #   - secure.example.com
    #   - private.example.com
    #   policy: two_factor
    # - domain: singlefactor.example.com
    #   policy: one_factor
    # - domain: "mx2.mail.example.com"
    #   subject: "group:admins"
    #   policy: deny
    # - domain: "*.example.com"
    #   subject:
    #   - "group:admins"
    #   - "group:moderators"
    #   policy: two_factor
    # - domain: dev.example.com
    #   resources:
    #   - "^/groups/dev/.*$"
    #   subject: "group:dev"
    #   policy: two_factor
    # - domain: dev.example.com
    #   resources:
    #   - "^/users/john/.*$"
    #   subject:
    #   - ["group:dev", "user:john"]
    #   - "group:admins"
    #   policy: two_factor
    # - domain: "{user}.example.com"
    #   policy: bypass

  ##
  ## Session Provider Configuration
  ##
  session:
    name: authelia_session
    same_site: lax
    expiration: 1h
    inactivity: 5m
    remember_me_duration: 1M

    ##
    ## Redis Provider
    ##
    redis:
      enabled: true
      enabledSecret: false
      host: ${RURI_ADDR}
      port: 6379
      username: ""
      database_index: 0
      maximum_active_connections: 8
      minimum_idle_connections: 0

      tls:
        enabled: false

  ##
  ## Regulation Configuration
  ##
  ## This mechanism prevents attackers from brute forcing the first factor. It bans the user if too many attempts are done
  ## in a short period of time.
  regulation:
    max_retries: 3
    find_time: 2m
    ban_time: 5m

  ##
  ## Storage Provider Configuration
  ##
  storage:
    ##
    ## MySQL (Storage Provider)
    ##
    mysql:
      enabled: false
      host: ${RURI_ADDR}
      port: 3306
      database: authelia
      username: authelia
      timeout: 5s

  ##
  ## Notification Provider
  ##
  ##
  notifier:
    disable_startup_check: false

    ##
    ## SMTP (Notification Provider)
    ##
    smtp:
      enabled: true
      enabledSecret: false
      host: email-smtp.us-west-2.amazonaws.com
      port: 587
      timeout: 5s
      username: AKIAWL74NM3JSZ73BVD5
      sender: mike@kao.family
      identifier: localhost
      subject: "[TheKaoCloud] {title}"

  identity_providers:
    oidc:
      ## Enables this in the config map. Currently in beta stage.
      ## See https://www.authelia.com/r/openid-connect/
      enabled: false

      access_token_lifespan: 1h
      authorize_code_lifespan: 1m
      id_token_lifespan: 1h
      refresh_token_lifespan: 90m

      ## Enables additional debug messages.
      enable_client_debug_messages: false

      ## Cross-Origin Resource Sharing (CORS) settings.
      cors:
        ## List of endpoints in addition to the metadata endpoints to permit cross-origin requests on.
        # endpoints:
        #    - authorization
        #    - token
        #    - revocation
        #    - introspection
        #    - userinfo
        endpoints: ["authorization", "token", "revocation", "introspection"]
        allowed_origins_from_client_redirect_uris: true

      clients: []
      # clients:
        # -
          ## The ID is the OpenID Connect ClientID which is used to link an application to a configuration.
          # id: myapp

          ## The description to show to users when they end up on the consent screen. Defaults to the ID above.
          # description: My Application

          ## The client secret is a shared secret between Authelia and the consumer of this client.
          # secret: apple123

          ## Sector Identifiers are occasionally used to generate pairwise subject identifiers. In most cases this is not
          ## necessary. Read the documentation for more information.
          ## The subject identifier must be the host component of a URL, which is a domain name with an optional port.
          # sector_identifier: example.com

          ## Sets the client to public. This should typically not be set, please see the documentation for usage.
          # public: false

          ## The policy to require for this client; one_factor or two_factor.
          # authorization_policy: two_factor

          ## By default users cannot remember pre-configured consents. Setting this value to a period of time using a
          ## duration notation will enable users to remember consent for this client. The time configured is the amount
          ## of time the pre-configured consent is valid for granting new authorizations to the user.
          # pre_configured_consent_duration: 30d

          ## Audience this client is allowed to request.
          # audience: []

          ## Scopes this client is allowed to request.
          # scopes:
          #   - openid
          #   - profile
          #   - email
          #   - groups

          ## Redirect URI's specifies a list of valid case-sensitive callbacks for this client.
          # redirect_uris:
          #   - https://oidc.example.com/oauth2/callback

          ## Grant Types configures which grants this client can obtain.
          ## It's not recommended to configure this unless you know what you're doing.
          # grant_types:
          #   - refresh_token
          #   - authorization_code

          ## Response Types configures which responses this client can be sent.
          ## It's not recommended to configure this unless you know what you're doing.
          # response_types:
          #   - code

          ## Response Modes configures which response modes this client supports.
          ## It's not recommended to configure this unless you know what you're doing.
          # response_modes:
          #   - form_post
          #   - query
          #   - fragment

          ## The algorithm used to sign userinfo endpoint responses for this client, either none or RS256.
          # userinfo_signing_algorithm: none

##
## Authelia Secret Generator.
##
## If both the values and existingSecret are not defined, this chart randomly generates a new secret on each
## install. It is recommended that you use something like sealed-secrets (https://github.com/bitnami-labs/sealed-secrets)
## and use the existingSecrets. All secrets can be stored in a single k8s secret if desired using the key option.
##
secret:
  existingSecret: *appname

  annotations: {}
  labels: {}

  mountPath: /secrets

  ## Secrets.
  jwt:
    key: JWT_TOKEN
  ldap:
    key: LDAP_PASSWORD
  storage:
    key: STORAGE_PASSWORD
  storageEncryptionKey:
    key: STORAGE_ENCRYPTION_KEY
  session:
    key: SESSION_ENCRYPTION_KEY
  duo:
    key: DUO_API_KEY
  redis:
    key: REDIS_PASSWORD
  redisSentinel:
    key: REDIS_SENTINEL_PASSWORD
  smtp:
    key: SMTP_PASSWORD
  oidcPrivateKey:
    key: OIDC_PRIVATE_KEY
  oidcHMACSecret:
    key: OIDC_HMAC_SECRET

##
## Authelia Persistence Configuration.
##
persistence:
  config:
    enabled: true
    type: configMap
    name: *appname
    subPath: configuration.yml
    mountPath: /config/configuration.yml
    readOnly: false
