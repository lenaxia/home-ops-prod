---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &appname authelia
  namespace: networking
spec:
  interval: 5m
  chart:
    spec:
      chart: *appname
      version: 0.9.0-beta5
      sourceRef:
        kind: HelmRepository
        name: authelia-charts
        namespace: flux-system
      interval: 5m
  dependsOn:
    - name: cert-manager
      namespace: cert-manager
  install:
    createNamespace: true
    remediation:
      retries: 6
  upgrade:
    remediation:
      retries: 6
  values:
    image:
      repository: ghcr.io/authelia/authelia
      tag: 4.38.8
      pullPolicy: Always

    nodeSelector:
      node-role.kubernetes.io/worker: "true"

    service:
      enabled: true
      type: LoadBalancer
      port: 80
      spec:
        loadBalancerIP: "${SVC_AUTHELIA_ADDR}"
        externalTrafficPolicy: Local
      annotations:
        metallb.universe.tf/address-pool: dev-infra
    pod:
      # Must be Deployment, DaemonSet, or StatefulSet.
      kind: Deployment
      replicas: 1
      extraVolumes:
        - name: oidc-issuer-key
          secret:
            secretName: authelia  # Assuming the secret is named 'authelia'
            items:
              - key: OIDC_ISSUER_PRIVATE_KEY
                path: oidc-issuer-key.pem
      
      extraVolumeMounts:
        - name: oidc-issuer-key
          mountPath: "/secrets/oidc"
          readOnly: true

    envFrom:
      - secretRef:
          name: *appname

    ##
    ## Authelia Config Map Generator
    ##
    configMap:
      enabled: true
    
      annotations: {}
      labels: {}
    
      key: configuration.yaml
    
      existingConfigMap: ""

      filters:
        enableTemplating: true
    
      log:
        level: debug
        format: text
        ## File path where the logs will be written. If not set logs are written to stdout.
        # file_path: /config/authelia.log
        file_path: /config/authelia.log
    
      ##
      ## Telemetry Configuration
      ##
      telemetry:
        metrics:
          enabled: true
          port: 9959
    
          serviceMonitor:
            enabled: true
            annotations: {}
            labels: {}
    
      ## Options are totp, webauthn, mobile_push.
      default_2fa_method: "mobile_push"
    
      theme: light
    
      ##
      ## TOTP Configuration
      ##
      totp:
        disable: false
        issuer: ${SECRET_DEV_DOMAIN}
        algorithm: sha1
        digits: 6
        period: 30
        skew: 1
    
      ##
      ## WebAuthn Configuration
      ##
      webauthn:
        disable: false
        timeout: 60s
        display_name: ${SECRET_DEV_DOMAIN}
        ## Options are none, indirect, direct.
        attestation_conveyance_preference: indirect
        ## Options are required, preferred, discouraged.
        user_verification: preferred
    
      ##
      ## Duo Push API Configuration
      ##
      ## Parameters used to contact the Duo API. Those are generated when you protect an application of type
      ## "Partner Auth API" in the management panel.
      duo_api:
        enabled: true
        hostname: api-b68b8774.duosecurity.com
        integration_key: DI2IGENLJKFDHSKGWT1L
        enable_self_enrollment: true
    
      ##
      ## Authentication Backend Provider Configuration
      ##
      authentication_backend:
        password_reset:
          disable: false
          custom_url: ""
    
        refresh_interval: 5m
    
        ## LDAP backend configuration.
        ##
        ldap:
          enabled: true
          implementation: custom
          url: ldap://${NAS_ADDR}
          timeout: 5s
          start_tls: false
    
          tls:
            server_name: ""
            skip_verify: false
            minimum_version: TLS1.2
    
          base_dn: dc=kao,dc=family
    
          username_attribute: uid
          additional_users_dn: cn=users
          users_filter: (&({username_attribute}={input})(objectClass=posixAccount))
    
          additional_groups_dn: cn=groups
          groups_filter: (&(member={dn})(objectclass=posixGroup))
          group_name_attribute: cn
    
          mail_attribute: mail
    
          display_name_attribute: displayName 
    
          permit_referrals: false
    
          ## Strongly discouraged. See https://www.authelia.com/configuration/first-factor/ldap/#permit_unauthenticated_bind.
          permit_unauthenticated_bind: false
    
          ## The username of the admin user.
          user: uid=autheliauser,cn=users,dc=kao,dc=family
    
      ##
      ## Password Policy Configuration.
      ##
      password_policy:
        standard:
          enabled: false
          min_length: 8
          max_length: 0
          require_uppercase: true
          require_lowercase: true
          require_number: true
          require_special: true
    
        ## zxcvbn is a well known and used password strength algorithm. It does not have tunable settings.
        zxcvbn:
          enabled: false
          min_score: 0
    
      ##
      ## Access Control Configuration
      ##
      ## Access control is a list of rules defining the authorizations applied for one resource to users or group of users.
      ##
      ## If 'access_control' is not defined, ACL rules are disabled and the 'bypass' rule is applied, i.e., access is allowed
      ## to anyone. Otherwise restrictions follow the rules defined.
      ##
      ## Note: One can use the wildcard * to match any subdomain.
      ## It must stand at the beginning of the pattern. (example: *.mydomain.com)
      ##
      ## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct.
      ##
      ## Definition: A 'rule' is an object with the following keys: 'domain', 'subject', 'policy' and 'resources'.
      ##
      ## - 'domain' defines which domain or set of domains the rule applies to.
      ##
      ## - 'subject' defines the subject to apply authorizations to. This parameter is optional and matching any user if not
      ##    provided. If provided, the parameter represents either a user or a group. It should be of the form
      ##    'user:<username>' or 'group:<groupname>'.
      ##
      ## - 'policy' is the policy to apply to resources. It must be either 'bypass', 'one_factor', 'two_factor' or 'deny'.
      ##
      ## - 'resources' is a list of regular expressions that matches a set of resources to apply the policy to. This parameter
      ##   is optional and matches any resource if not provided.
      ##
      ## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
      access_control:
        secret:
          enabled: false
          key: configuration.acl.yaml
          existingSecret: ""
    
        default_policy: deny
    
        networks:
        - name: private
          networks:
          - 10.0.0.0/8
          - 172.16.0.0/12
          - 192.168.0.0/16
    
        rules:
        - domain: authelia.${SECRET_DEV_DOMAIN}
          policy: bypass

        # Require 2fa in all access modes
        - domain:
            - "dsm.${SECRET_DEV_DOMAIN}"
            - "ygg.${SECRET_DEV_DOMAIN}"
            - "guac.${SECRET_DEV_DOMAIN}"
            - "amole.${SECRET_DEV_DOMAIN}"
          policy: two_factor

        # Vaultwarden admin auth
        - domain: 
            - "vault.${SECRET_DEV_DOMAIN}"
          resources:
            - "^/admin/.*$"
            - "^/admin"
          policy: two_factor

        # Webfinger
        - domain_regex:
            - '${SECRET_DEV_DOMAIN}$'
          policy: bypass
          resources:
            - "^/.well-known/.*$"
            - "^/.well-known"

        # Baby API
        - domain_regex:
            - 'baby.*\.${SECRET_DEV_DOMAIN}$'
            - 'babypanda.*\.${SECRET_DEV_DOMAIN}$'
          policy: bypass
          resources:
            - "^/api/.*$"
            - "^/api"

        # LangServer API
        - domain_regex:
            - 'lang.*\.${SECRET_DEV_DOMAIN}$'
          policy: bypass
          resources:
            - "^/generate-speech/.*$"
            - "^/generate-speech"

        ## Grocy API
        #- domain_regex:
        #    - 'grocy.*\.${SECRET_DEV_DOMAIN}$'
        #  policy: bypass
        #  resources:
        #    - "^/api/.*$"
        #    - "^/api"

        # Local only bypass policies
        - domain: 
            - "ldap.${SECRET_DEV_DOMAIN}"
            - "collabora.${SECRET_DEV_DOMAIN}"
            - "minio.${SECRET_DEV_DOMAIN}"
            - "hass.${SECRET_DEV_DOMAIN}"
            - "jelly.${SECRET_DEV_DOMAIN}"
            - "ai.${SECRET_DEV_DOMAIN}"
            - "overseerr.${SECRET_DEV_DOMAIN}"
          policy: bypass
          networks:
            - private

        # Public bypass policies
        - domain: 
            # Games
            #- "hercules-renewal.${SECRET_DEV_DOMAIN}"
            #- "hercules-classic.${SECRET_DEV_DOMAIN}"
            #- "games.${SECRET_DEV_DOMAIN}"
            #media
            - "w.${SECRET_DEV_DOMAIN}"
            - "request.${SECRET_DEV_DOMAIN}"
            - "office.${SECRET_DEV_DOMAIN}"
            - "hub.${SECRET_DEV_DOMAIN}"
            #synology
            - "drive.${SECRET_DEV_DOMAIN}"
            - "file.${SECRET_DEV_DOMAIN}"
            - "moments.${SECRET_DEV_DOMAIN}"
            - "photos.${SECRET_DEV_DOMAIN}"
            #utilities
            - "status.${SECRET_DEV_DOMAIN}"
            - "vault.${SECRET_DEV_DOMAIN}"
            - "speed.${SECRET_DEV_DOMAIN}"
            #- "password.${SECRET_DEV_DOMAIN}"
            #storage
            - "s3.${SECRET_DEV_DOMAIN}"
          policy: bypass

        # Local only policies
        - domain: 
            - "*.${SECRET_DEV_DOMAIN}"
          policy: one_factor
          networks:
            - private

        # Admin services - 2 Factor
        - domain:
            - "traefik.${SECRET_DEV_DOMAIN}"
            - "code.${SECRET_DEV_DOMAIN}"
            - "lang.${SECRET_DEV_DOMAIN}"
            #media
            - "tv.${SECRET_DEV_DOMAIN}"
            - "tautulli.${SECRET_DEV_DOMAIN}"
            - "bazarr.${SECRET_DEV_DOMAIN}"
            - "sonarr.${SECRET_DEV_DOMAIN}"
            - "sonarr4k.${SECRET_DEV_DOMAIN}"
            - "radarr.${SECRET_DEV_DOMAIN}"
            - "radarr4k.${SECRET_DEV_DOMAIN}"
            - "readarr.${SECRET_DEV_DOMAIN}"
            - "nzbget.${SECRET_DEV_DOMAIN}"
            - "transmission.${SECRET_DEV_DOMAIN}"
            - "nzbhydra.${SECRET_DEV_DOMAIN}"
            - "calibre.${SECRET_DEV_DOMAIN}"
            - "change.${SECRET_DEV_DOMAIN}"
            - "dl.${SECRET_DEV_DOMAIN}"
            #monitoring
            - "chronograf.${SECRET_DEV_DOMAIN}"
            - "loki.${SECRET_DEV_DOMAIN}"
            - "grafana.${SECRET_DEV_DOMAIN}"
            - "prom.${SECRET_DEV_DOMAIN}"
            - "alerts.${SECRET_DEV_DOMAIN}"
            #utilities
            - "echo.${SECRET_DEV_DOMAIN}"
            - "firefox.${SECRET_DEV_DOMAIN}"
            - "guac.${SECRET_DEV_DOMAIN}"
            - "amole.${SECRET_DEV_DOMAIN}"
            - "oauth-debug.${SECRET_DEV_DOMAIN}"
            - "pgadmin.${SECRET_DEV_DOMAIN}"
            - "phpmyadmin.${SECRET_DEV_DOMAIN}"
            - "portainer.${SECRET_DEV_DOMAIN}"
            - "proxmox.${SECRET_DEV_DOMAIN}"
            - "ping.${SECRET_DEV_DOMAIN}"
            #storage
            - "kopia.${SECRET_DEV_DOMAIN}"
            - "longhorn.${SECRET_DEV_DOMAIN}"
            #iot
            - "nodered.${SECRET_DEV_DOMAIN}"
          policy: two_factor
          subject:
          - "group:administrators"

        # Public services - 1 Factor
        - domain:
            #home
            - "baby*.${SECRET_DEV_DOMAIN}"
            - "chat.${SECRET_DEV_DOMAIN}"
            # monitoring
            - "grafana.${SECRET_DEV_DOMAIN}"
            #media
            - "library.${SECRET_DEV_DOMAIN}"
            - "plex.${SECRET_DEV_DOMAIN}"
            - "jelly.${SECRET_DEV_DOMAIN}"
            #storage
            - "paperless.${SECRET_DEV_DOMAIN}"
            #utilities
            - "hajimari.${SECRET_DEV_DOMAIN}"
          domain_regex:
            - 'baby.*\.${SECRET_DEV_DOMAIN}$'
          policy: one_factor

        # rules:
        # - domain_regex: '^.*\.example.com$'
        #   policy: bypass
        # - domain: public.example.com
        #   policy: bypass
        # - domain: "*.example.com"
        #   policy: bypass
        #   methods:
        #   - OPTIONS
        # - domain: secure.example.com
        #   policy: one_factor
        #   networks:
        #   - private
        #   - vpn
        #   - 192.168.1.0/24
        #   - 10.0.0.1
        # - domain:
        #   - secure.example.com
        #   - private.example.com
        #   policy: two_factor
        # - domain: singlefactor.example.com
        #   policy: one_factor
        # - domain: "mx2.mail.example.com"
        #   subject: "group:admins"
        #   policy: deny
        # - domain: "*.example.com"
        #   subject:
        #   - "group:admins"
        #   - "group:moderators"
        #   policy: two_factor
        # - domain: dev.example.com
        #   resources:
        #   - "^/groups/dev/.*$"
        #   subject: "group:dev"
        #   policy: two_factor
        # - domain: dev.example.com
        #   resources:
        #   - "^/users/john/.*$"
        #   subject:
        #   - ["group:dev", "user:john"]
        #   - "group:admins"
        #   policy: two_factor
        # - domain: "{user}.example.com"
        #   policy: bypass
    
      ##
      ## Session Provider Configuration
      ##
      session:
        name: authelia_auth_session
        same_site: lax
        expiration: 1h
        inactivity: 5m
        remember_me: 1M
        cookies:
          - domain:  ${SECRET_DEV_DOMAIN}
            subdomain: 'authelia'
            default_redirection_url: https://authelia.${SECRET_DEV_DOMAIN}
    
        ##
        ## Redis Provider
        ##
        redis:
          enabled: true
          enabledSecret: true
          host: redis-lb.databases.svc.cluster.local
          port: 6379
          username: ""
          database_index: 0
          maximum_active_connections: 8
          minimum_idle_connections: 0
    
          tls:
            enabled: false
    
      ##
      ## Regulation Configuration
      ##
      ## This mechanism prevents attackers from brute forcing the first factor. It bans the user if too many attempts are done
      ## in a short period of time.
      regulation:
        max_retries: 3
        find_time: 2m
        ban_time: 5m
    
      ##
      ## Storage Provider Configuration
      ##
      storage:
        ##
        ## MySQL (Storage Provider)
        ##
        mysql:
          enabled: false
          host: ${RURI_ADDR}
          port: 3306
          database: authelia-k3s
          username: authelia-k3s
          timeout: 10s

        postgres:
          enabled: false
          host: defaultpg-rw.databases.svc.cluster.local
          port: 5432
          database: authelia
          schema: public
          username: authelia
          ssl:
            mode: disable
            
    
      ##
      ## Notification Provider
      ##
      ##
      notifier:
        disable_startup_check: true
    
        ##
        ## SMTP (Notification Provider)
        ##
        smtp:
          enabled: true
          enabledSecret: true
          host: ${SECRET_AWS_SMTP_HOST}
          port: ${SECRET_AWS_SMTP_PORT}
          timeout: 5s
          username: ${SECRET_AWS_SMTP_USERNAME}
          sender: ${SECRET_AWS_SMTP_FROM_ADDR}
          identifier: thekao.cloud
          subject: "[TheKaoCloud] {title}"
    
      identity_providers:
        oidc:
          ## Enables this in the config map. Currently in beta stage.
          ## See https://www.authelia.com/r/openid-connect/
          enabled: true
    
          access_token: 1h
          authorize_code: 1m
          id_token: 1h
          refresh_token: 90m
    
          enable_client_debug_messages: false

          issuer_private_keys:
            - key_id: 'default_cert'
              algorithm: 'RS256'
              use: 'sig'
              key:
                path: '/secrets/oidc/oidc-issuer-key.pem'
    
          ## Cross-Origin Resource Sharing (CORS) settings.
          cors:
            ## List of endpoints in addition to the metadata endpoints to permit cross-origin requests on.
            endpoints: ["authorization", "token", "revocation", "introspection", "userinfo"]
            allowed_origins_from_client_redirect_uris: true
    
          clients:
          - client_id: tailscale
            description: Tailscale
            client_secret: 
              value: ${SECRET_TAILSCALE_OAUTH_CLIENT_SECRET_HASHED}
            public: false
            authorization_policy: one_factor
            consent_mode: implicit
            pre_configured_consent_duration: 1y
            scopes: ["openid", "profile", "email"]
            redirect_uris: ["https://login.tailscale.com/a/oauth_response"]
          - client_id: minio
            description: MinIO
            client_secret: 
              value: ${SECRET_MINIO_OAUTH_CLIENT_SECRET_HASHED}
            public: false
            authorization_policy: one_factor
            consent_mode: implicit
            pre_configured_consent_duration: 1y
            scopes: ["openid", "profile", "email"]
            redirect_uris: ["https://minio.${SECRET_DEV_DOMAIN}/oauth_callback"]
          - client_id: pgadmin
            description: PGAdmin
            client_secret: 
              value: ${SECRET_PGADMIN_OAUTH_CLIENT_SECRET_HASHED}
            public: false
            authorization_policy: one_factor
            consent_mode: implicit
            pre_configured_consent_duration: 1y
            scopes: ["openid", "profile", "email"]
            redirect_uris: ["https://pgadmin.${SECRET_DEV_DOMAIN}/oauth2/authorize"]
          - client_id: grafana
            description: Grafana
            client_secret: 
              value: ${SECRET_GRAFANA_OAUTH_CLIENT_SECRET_HASHED}
            public: false
            authorization_policy: one_factor
            consent_mode: implicit
            pre_configured_consent_duration: 1y
            scopes: ["openid", "profile", "groups", "email"]
            redirect_uris: ["https://grafana.${SECRET_DEV_DOMAIN}/login/generic_oauth"]
          - client_id: outline
            description: outline
            client_secret: 
              value: "${SECRET_OUTLINE_OAUTH_CLIENT_SECRET_HASHED}"
            public: false
            authorization_policy: one_factor
            consent_mode: implicit
            pre_configured_consent_duration: 1y
            scopes: ["openid", "profile", "email", "offline_access"]
            redirect_uris: ["https://w.${SECRET_DEV_DOMAIN}/auth/oidc.callback"]
            token_endpoint_auth_method: client_secret_post
          - client_id: overseerr
            description: overseerr
            client_secret: 
              value: "${SECRET_OVERSEERR_OAUTH_CLIENT_SECRET_HASHED}"
            public: false
            authorization_policy: one_factor
            consent_mode: implicit
            pre_configured_consent_duration: 1y
            scopes: ["openid", "profile", "email"]
            redirect_uris: ["https://request.${SECRET_DEV_DOMAIN}/api/v1/auth/oidc-callback","https://request2.${SECRET_DEV_DOMAIN}/api/v1/auth/oidc-callback", "https://overseerr.${SECRET_DEV_DOMAIN}/api/v1/auth/oidc-callback"]
    
    
    ##
    ## Authelia Secret Generator.
    ##
    ## If both the values and existingSecret are not defined, this chart randomly generates a new secret on each
    ## install. It is recommended that you use something like sealed-secrets (https://github.com/bitnami-labs/sealed-secrets)
    ## and use the existingSecrets. All secrets can be stored in a single k8s secret if desired using the key option.
    ##
    secret:
      existingSecret: *appname
    
      annotations: {}
      labels: {}
    
      mountPath: /secrets
    
      ## Secrets.
      jwt:
        key: JWT_SECRET
      ldap:
        key: LDAP_PASSWORD
      storage:
        key: STORAGE_PASSWORD
      storageEncryptionKey:
        key: STORAGE_ENCRYPTION_KEY
      session:
        key: SESSION_SECRET
      duo:
        key: DUO_SECRET_KEY
      redis:
        key: REDIS_PASSWORD
        value: ${SECRET_REDIS_PASSWORD}
      redisSentinel:
        key: REDIS_SENTINEL_PASSWORD
        value: ${SECRET_REDIS_PASSWORD}
      smtp:
        key: SMTP_PASSWORD
      oidcPrivateKey:
        key: OIDC_ISSUER_PRIVATE_KEY
      oidcHMACSecret:
        key: OIDC_HMAC_SECRET
    
    ##
    ## Authelia Persistence Configuration.
    ##
    #persistence:
    #  config:
    #    enabled: true
    #    type: configMap
    #    name: *appname
    #    subPath: configuration.yml
    #    mountPath: /config/configuration.yml
    #    readOnly: false
