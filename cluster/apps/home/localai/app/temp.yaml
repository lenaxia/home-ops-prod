{{- $urls := "" -}}
{{- range $idx, $model := .Values.models.list }}
{{- $urls = printf "%s%s %s," $urls $model.url ($model.basicAuth | default "") }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "local-ai.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "local-ai.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "local-ai.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      name: {{ template "local-ai.fullname" . }}
      labels:
        app.kubernetes.io/name: {{ include "local-ai.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        {{- if .Values.promptTemplates }}
        checksum/config-prompt-templates: {{ include (print $.Template.BasePath "/configmap-prompt-templates.yaml") . | sha256sum }}
        {{- end }}
    spec:
      {{- with .Values.deployment.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        # Additional initContainers from values.yaml
        {{- range .Values.initContainers }}
        - name: {{ .name }}
          image: {{ .image }}
          imagePullPolicy: {{ .imagePullPolicy }}
          command: {{ .command }}
          args: {{ .args | default list }}
          env:
            {{- toYaml .env | nindent 12 }}
          resources:
            {{- toYaml .resources | nindent 12 }}
          volumeMounts:
            {{- toYaml .volumeMounts | nindent 12 }}
            {{- range $key, $pvc := .Values.persistence }}
              {{- if $pvc.enabled }}
              - name: {{ $key }}
                mountPath: {{ $pvc.globalMount | default (print "/" $key) }}
              {{- end }}
            {{- end }}
          securityContext:
            {{- toYaml .securityContext | nindent 12 }}
        {{- end }}
        {{- if .Values.promptTemplates }}
        - name: prompt-templates
          image: {{ .Values.deployment.prompt_templates.image }}
          imagePullPolicy: {{ .Values.deployment.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              cp -fL /prompt-templates/* /models
          volumeMounts:
            - mountPath: /prompt-templates
              name: prompt-templates
            {{- range $key, $pvc := .Values.persistence }}
              {{- if $pvc.enabled }}
              - name: {{ $key }}
                mountPath: {{ $pvc.globalMount | default (print "/" $key) }}
              {{- end }}
            {{- end }}
        {{- end }}
        - name: download-model
          image: {{ .Values.deployment.download_model.image }}
          imagePullPolicy: {{ .Values.deployment.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              MODEL_DIR={{ .Values.deployment.modelsPath }}
              FORCE_DOWNLOAD={{ .Values.models.forceDownload }}
              URLS="{{ $urls }}"
              LOCK_DIR=/tmp/model-download-locks

              mkdir -p "$MODEL_DIR"
              mkdir -p "$LOCK_DIR"
              mkdir -p "/tmp/generated/images"
              mkdir -p "/tmp/generated/audio"
              rm -rf "/models/lost+found"


              echo "$URLS" | awk -F, '{for (i=1; i<=NF; i++) print $i}' | while read -r line; do
                  url=$(echo "$line" | awk '{print $1}')
                  auth=$(echo "$line" | awk '{print $2}')
                  full_filename=$(basename "$url" .bin)
                  short_filename=$(echo "$full_filename" | cut -c1-20)
                  hash=$(echo "$full_filename" | sha256sum | cut -c1-12)
                  filename="${short_filename}_${hash}"
                  lockfile="$LOCK_DIR/$filename.lock"

                  if [ -e "$MODEL_DIR/$filename" ]; then
                      echo "File $filename already exists. Skipping download."
                      continue
                  fi

                  if [ -e "$lockfile" ]; then
                      echo "Another pod is downloading $filename. Waiting for download to complete."
                      while [ -e "$lockfile" ]; do sleep 1; done
                      continue
                  fi

                  touch "$lockfile"

                  echo "Downloading $filename"
                  if [ -n "$auth" ]; then
                      wget --header "Authorization: Basic $auth" "$url" -O "$MODEL_DIR/$filename"
                  else
                      wget "$url" -O "$MODEL_DIR/$filename"
                  fi

                  if [ "$?" -ne 0 ]; then
                      echo "Download failed."
                      rm -f "$lockfile"
                      exit 1
                  else
                      echo "Download completed."
                      rm -f "$lockfile"
                  fi
              done
          volumeMounts:
            {{- range $key, $pvc := .Values.persistence }}
              {{- if $pvc.enabled }}
              - name: {{ $key }}
                mountPath: {{ $pvc.globalMount | default (print "/" $key) }}
              {{- end }}
            {{- end }}
      containers:
        # Sidecar containers from values.yaml
        {{- range .Values.sidecarContainers }}
        - name: {{ .name }}
          image: {{ .image }}
          imagePullPolicy: {{ .imagePullPolicy }}
          command: {{ .command }}
          args: {{ .args | default list }}
          env:
            {{- toYaml .env | nindent 12 }}
          ports:
            {{- toYaml .ports | nindent 12 }}
          resources:
            {{- toYaml .resources | nindent 12 }}
          volumeMounts:
            {{- toYaml .volumeMounts | nindent 12 }}
            {{- range $key, $pvc := .Values.persistence }}
              {{- if $pvc.enabled }}
              - name: {{ $key }}
                mountPath: {{ $pvc.globalMount | default (print "/" $key) }}
              {{- end }}
            {{- end }}
          livenessProbe:
            {{- toYaml .livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .readinessProbe | nindent 12 }}
          securityContext:
            {{- toYaml .securityContext | nindent 12 }}
        {{- end }}
        - name: {{ template "local-ai.fullname" . }}
          image: "{{ .Values.deployment.image.repository }}:{{ .Values.deployment.image.tag }}"
          imagePullPolicy: {{ .Values.deployment.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- range $key, $value := .Values.deployment.env }}
            - name: {{ $key | upper }}
              value: {{ quote $value }}
            {{- end }}
            - name: MODELS_PATH
              value: {{ .Values.deployment.modelsPath }}
          volumeMounts:
            {{- range $key, $pvc := .Values.persistence }}
              {{- if $pvc.enabled }}
              - name: {{ $key }}
                mountPath: {{ $pvc.globalMount | default (print "/" $key) }}
              {{- end }}
            {{- end }}
      volumes:
        {{- range $key, $pvc := .Values.persistence }}
          {{- if $pvc.enabled }}
          - name: {{ $key }}
            persistentVolumeClaim:
              claimName: {{ printf "%s-%s" (include "local-ai.fullname" $) $key }}
          {{- end }}
        {{- end }}
        - name: prompt-templates
          configMap:
            name: {{ template "local-ai.fullname" . }}-prompt-templates
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

