apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &appname hercules-renewal
  namespace: home
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 1.5.1
      interval: 16m
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  # See https://github.com/bjw-s/helm-charts/blob/main/charts/library/common/values.yaml
  values:
    image:
      repository: ghcr.io/lenaxia/hercules
      tag: renewal-20190605

    podAnnotations:
      secret.reloader.stakater.com/reload: *appname

    env:
      - name: MYSQL_HOST
        valueFrom:
          secretKeyRef:
            name: mariadb-secret
            key: host
      - name: MYSQL_PORT
        valueFrom:
          secretKeyRef:
            name: mariadb-secret
            key: port

      # -- Set the application database type
    envFrom:
      - secretRef:
          name: *appname 

# ...
    initContainers:
      init-db:
        image: ubuntu:latest  # use an image with curl
        command: ["/bin/sh", "-c"]
        args:
        - >
          #apk add --no-cache curl && curl --version && which curl && \
          apt-get update && apt-get install -y curl && \
          /usr/bin/curl https://s3.thekao.cloud/public/ragnarok/ro-herc-renewal-sql.tar.gz -o sql-files.tar.gz && \
          tar -xzf sql-files.tar.gz -C /docker-entrypoint-initdb.d/ && \
          rm sql-files.tar.gz
        volumeMounts:
          - name: db-scripts
            mountPath: /docker-entrypoint-initdb.d
      load-db:
        image: mariadb:10.5
        command: ["sh", "-c"]
        args:
        - >
          echo "CREATE DATABASE IF NOT EXISTS ${MYSQL_DATABASE}; GRANT ALL PRIVILEGES ON ${MYSQL_DATABASE}.* TO '${MYSQL_USERNAME}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}'; FLUSH PRIVILEGES;" | mysql -h ${MYSQL_HOST} -u root -p${MYSQL_ROOT_PASSWORD} && \
          for file in /docker-entrypoint-initdb.d/*.sql; do
            mysql -h ${MYSQL_HOST} -u ${MYSQL_USERNAME} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} < $file;
          done
        env:
        - name: MYSQL_HOST
          valueFrom:
            secretKeyRef:
              name: mariadb-secret
              key: host
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb-secret
              key: mariadb-root-password
        - name: MYSQL_USERNAME
          valueFrom:
            secretKeyRef:
              name: hercules-renewal
              key: MYSQL_USERNAME
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hercules-renewal
              key: MYSQL_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: hercules-renewal
              key: MYSQL_DATABASE
        volumeMounts:
          - name: db-scripts
            mountPath: /docker-entrypoint-initdb.d
# ...


    persistence:
      config:
        enabled: true
        accessMode: ReadWriteOnce
        existingClaim: hercules-renewal-volume
      db-scripts:
        enabled: true
        type: emptyDir

    # -- Configures service settings for the chart.
    # @default -- See values.yaml
    service:
      main:
        type: LoadBalancer
        loadBalancerIP: "${SVC_HERCULES_RENEWAL_ADDR}"
        externalTrafficPolicy: Local
        ports:
          http:
            port: 6900
            targetPort: 6900
          char:
            port: 6121
            targetPort: 6121
          map:
            port: 5121
            targetPort: 5121

    ingress:
      main:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: networking-chain-authelia@kubernetescrd
        hosts:
        - host: &uri ro-login-renewal.${SECRET_DEV_DOMAIN}
          paths:
          - path: /
            pathType: Prefix
        tls:
        - hosts:
            - *uri
          secretName: *uri
    nodeSelector:
      node-role.kubernetes.io/worker: "true"
