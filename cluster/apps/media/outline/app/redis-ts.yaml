---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: outline-volume
    labels:
      app: outline
      snapshot.home.arpa/enabled: "false"
spec:
    accessModes:
        - ReadWriteMany
    storageClassName: local-path
    resources:
        requests:
            storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-ts
  namespace: media
data:
  redis.ts: |
    import Redis, { RedisOptions } from "ioredis";
    import defaults from "lodash/defaults";
    import env from "@server/env";
    import Logger from "@server/logging/Logger";
    
    type RedisAdapterOptions = RedisOptions & {
      /** Suffix to append to the connection name that will be displayed in Redis */
      connectionNameSuffix?: string;
    };
    
    const defaultOptions: RedisOptions = {
      maxRetriesPerRequest: 20,
      enableReadyCheck: false,
      showFriendlyErrorStack: env.ENVIRONMENT === "development",
    
      retryStrategy(times: number) {
        Logger.warn(`Blah Retrying redis connection: attempt ${times}`);
        return Math.min(times * 100, 3000);
      },
    
      reconnectOnError(err) {
        return err.message.includes("READONLY");
      },
    
      // support Heroku Redis, see:
      // https://devcenter.heroku.com/articles/heroku-redis#ioredis-module
      tls: (env.REDIS_URL || "").startsWith("rediss://")
        ? {
            rejectUnauthorized: false,
          }
        : undefined,
    };
    
    export default class RedisAdapter extends Redis {
      constructor(
        url: string | undefined,
        { connectionNameSuffix, ...options }: RedisAdapterOptions = {}
      ) {
        /**
         * For debugging. The connection name is based on the services running in
         * this process. Note that this does not need to be unique.
         */
        const connectionNamePrefix =
          env.ENVIRONMENT === "development" ? process.pid : "outline";
        const connectionName =
          `${connectionNamePrefix}:${env.SERVICES.replace(/,/g, "-")}` +
          (connectionNameSuffix ? `:${connectionNameSuffix}` : "");
    
        if (!url || !url.startsWith("ioredis://")) {
          super(
            env.REDIS_URL ?? "",
            defaults(options, { connectionName }, defaultOptions)
          );
        } else {
          let customOptions = {};
          try {
            const decodedString = Buffer.from(url.slice(10), "base64").toString();
            customOptions = JSON.parse(decodedString);
          } catch (error) {
            throw new Error(`Failed to decode redis adapter options: ${error}`);
          }
    
          try {
            super(
              defaults(options, { connectionName }, customOptions, defaultOptions)
            );
          } catch (error) {
            throw new Error(`Failed to initialize redis client: ${error}`);
          }
        }
        this.attachEventListeners();
    
        // More than the default of 10 listeners is expected for the amount of queues
        // we're running. Increase the max here to prevent a warning in the console:
        // https://github.com/OptimalBits/bull/issues/1192
        this.setMaxListeners(100);
      }
    
      private static client: RedisAdapter;
      private static subscriber: RedisAdapter;

      // Method to attach event listeners for detailed logging
      private attachEventListeners(): void {
        this.on('connect', () => {
          Logger.info('RedisAdapter: Redis client connected');
        });
    
        this.on('ready', () => {
          Logger.info('RedisAdapter: Redis client is ready to execute commands');
        });
    
        this.on('error', (error) => {
          Logger.error('RedisAdapter: Redis client encountered an error', error);
        });
    
        this.on('reconnecting', (time) => {
          Logger.info(`RedisAdapter: Redis client reconnecting in ${time} ms`);
        });
    
        this.on('end', () => {
          Logger.info('RedisAdapter: Redis client connection has ended');
        });
    
        this.on('close', () => {
          Logger.info('RedisAdapter: Redis client connection has closed');
        });
      }
    
      public static get defaultClient(): RedisAdapter {
        return (
          this.client ||
          (this.client = new this(env.REDIS_URL, {
            connectionNameSuffix: "client",
          }))
        );
      }
    
      public static get defaultSubscriber(): RedisAdapter {
        return (
          this.subscriber ||
          (this.subscriber = new this(env.REDIS_URL, {
            maxRetriesPerRequest: null,
            connectionNameSuffix: "subscriber",
          }))
        );
      }
    }
