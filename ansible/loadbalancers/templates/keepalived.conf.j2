# Check for the presence of the SSH daemon. That way, if SSH dies, we prefer
# the other node which remains remotely manageable.
vrrp_script chk_sshd {
   script "pkill -0 sshd"          # pkill -0 is cheaper than pidof
   interval 5                      # check every 5 seconds
   weight -4                       # remove 4 points of prio if missing
   fall 2                          # check twice before setting down
   rise 1                          # check once before setting up
}

# Create a script for each of healthchecks defined 
# Creates a shell script to execute the healthcheck
# TODO: Enable a script_file refernece which will point to an external file
#       that would be loaded into the hc.name.sh. This would enable
#       health checks that are longer than a single line.
{% for hc in healthchecks %}
vrrp_script chk_{{ hc.name }} {
   script "/etc/keepalived/scripts/{{ hc.name }}.sh"
   interval {{ hc.interval | default('5') }}
   weight {{ hc.weight | default('2') }}
   fall {{ hc.fall | default('3') }}
   rise {{ hc.rise | default('1') }}
}
{% endfor %}

# Manage each virtual IP. If there are multiple loadbalancers, then each lb will 
# be given MASTER status for a different virtual IP in a round robin fashion
# TODO: Currently this will not handle the case where there are more VIPs than 
#       lbs. This means that an error would be thrown for any VIPs > than lbs. 
#       Add a wraparound capability that would detect when there are still VIPs
#       to configure but no more lbs, so that the roundrobin would restart from 
#       the initial lb
{% set lb_count = groups['loadbalancers']|length %}

# Manage each virtual IP.
{% for vip in virtualIPs %}
{% set outer_loop = loop %}
{% set lb_idx = loop.index0 % lb_count %} 

{% if lb_count == 1 %}
{% set state = 'MASTER' %}
{% set priority = 101 %}
{% else %}
{% set state = 'MASTER' if ansible_host == groups['loadbalancers'][lb_idx] else 'BACKUP' %}
{% set priority = '101' if ansible_host == groups['loadbalancers'][lb_idx] else '100' %}
{% endif %}

vrrp_instance vrrp_{{ loop.index0 }} {
   interface {{ vip.config.interface | default('eth0') }}
   state {{ state }}
   virtual_router_id 5{{ loop.index0 }}
   priority {{ priority }}
   virtual_ipaddress_excluded {
       {{ vip.ip }}
   }
   track_interface {
       {{ vip.config.interface | default('eth0') }} weight -2
   }
   track_script {
      chk_sshd
{% for healthcheck in vip.healthchecks %}
      chk_{{ healthcheck }}
{% endfor %}
   }
}
{% endfor %}
