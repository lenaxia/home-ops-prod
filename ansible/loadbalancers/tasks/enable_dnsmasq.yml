- name: Install dnsmasq
  apt:
    name: dnsmasq
    state: present

- name: Create TFTP root directory
  file:
    path: "{{ dnsmasq.tftp_root }}"
    state: directory

- name: Download iPXE boot files
  get_url:
    url: "{{ item.url }}"
    dest: "{{ dnsmasq.tftp_root }}/{{ item.dest }}"
  loop:
    - { url: "{{ dnsmasq.ipxe_bios_url }}", dest: "undionly.kpxe" }
    - { url: "{{ dnsmasq.ipxe_uefi_url }}", dest: "ipxe.efi" }

- name: Include SOPS encrypted vars
  include_vars:
    file: secret.sops.yaml
    name: sops_secrets

- name: Generate custom iPXE script for BIOS
  template:
    src: templates/bios-boot.ipxe.j2
    dest: "/tmp/bios-boot.ipxe"

- name: Generate custom iPXE script for UEFI
  template:
    src: templates/uefi-boot.ipxe.j2
    dest: "/tmp/uefi-boot.ipxe"

- name: Upload iPXE scripts to MinIO S3
  aws_s3:
    bucket: "tftp"
    object: "/{{ item }}"
    src: "/tmp/{{ item }}"
    mode: put
    endpoint_url: "{{ sops_secrets.data.minio_s3_credentials.endpoint_url }}"
    aws_access_key: "{{ sops_secrets.data.minio_s3_credentials.access_key }}"
    aws_secret_key: "{{ sops_secrets.data.minio_s3_credentials.secret_key }}"
  loop:
    - "bios-boot.ipxe"
    - "uefi-boot.ipxe"

- name: Configure dnsmasq for iPXE Boot
  blockinfile:
    path: /etc/dnsmasq.conf
    block: |
      port=0
      dhcp-range=192.168.1.0,proxy
      log-dhcp
      enable-tftp
      tftp-root={{ dnsmasq.tftp_root }}
      dhcp-boot=undionly.kpxe
      dhcp-userclass=set:ipxe,iPXE
      dhcp-boot=tag:ipxe,bios-boot.ipxe,x86PC
      dhcp-boot=tag:ipxe,uefi-boot.ipxe,X86-64_EFI
    backup: yes

- name: Restart dnsmasq service
  systemd:
    name: dnsmasq
   

